export default class Grid
{
	/**
	 * @param {string} gridText
	 * @param {string} date - Used to determine if values are accurate or should be updated
	 */
	constructor( gridText, date )
	{
		const {distributions, wordLengths} = Grid.parseText( gridText );

		this.date = date;
		this.distributions = distributions;
		this.wordLengths = wordLengths;
	}

	/**
	 * Parse Spelling Bee hints grid and return object describing distributions
	 * and word lengths
	 *
	 * @param {string} gridText
	 * @return {Object}
	 */
	static parseText( gridText )
	{
		const result = {
			distributions: {},
			wordLengths: 0,
		};

		// Clean up whitespace (fixes parsing issue encountered 2022-01-25)
		// ex., "2 Σ:" → "2Σ:"
		gridText = gridText.replace( /\s\n?([A-ZΣ]:)/g, "$1" );

		// Insert newlines if they're missing - ex., when fetched with `fetch()`
		if( !gridText.includes( "\n" ) )
		{
			gridText = gridText.replace( /(.:)/g, "\n$&" );
		}

		const gridRows = gridText
			.split( "\n" )
			.map( row => row.replace( /\s+/g, "\t" ).split( "\t" ) );

		if( gridRows.length < 3)
		{
			throw new Error( `Invalid grid string: Expecting 3 or more lines, found ${gridRows.length}` );
		}

		gridRows.forEach( (gridRow, index) =>
		{
			const expectedColummns = gridRows[0].length;
			if( gridRow.length !== expectedColummns )
			{
				throw new Error( `Invalid grid string: Expecting ${expectedColummns} columns on line ${index+1}, found ${gridRow.length}` );
			}
		});

		const letterCount = gridRows.length - 1;
		const wordLengths = gridRows[0].slice( 1, gridRows[0].length - 1 );
		result.wordLengths = wordLengths.map( wordLength => parseInt( wordLength ) );

		for( let l=1; l<letterCount; l++ )
		{
			const letter = gridRows[l][0].replace( ":", "" ).toUpperCase();
			const letterCounts = gridRows[l].slice( 1, gridRows[0].length - 1 );

			if( !result.distributions[letter] )
			{
				result.distributions[letter] = {};
			}

			letterCounts.forEach( (value, index) =>
			{
				const letterCount = value === "-" ? 0 : parseInt( value );
				result.distributions[letter][wordLengths[index]] = letterCount;
			});
		}

		return result;
	}

	/**
	 * @param {Array} [words=[]}
	 * @return {Object}
	 */
	remaining( words )
	{
		let remaining = {
			distributions: {},
			wordLengths: this.wordLengths,
		};

		Object.keys( this.distributions ).forEach( (letter) =>
		{
			remaining.distributions[letter] = Object.assign( {}, this.distributions[letter] );
		});

		words.forEach( (word) =>
		{
			const letter = word[0].toUpperCase();
			const length = word.length;
			if( remaining.distributions[letter] && remaining.distributions[letter][length] )
			{
				remaining.distributions[letter][length]--;
			}
		});

		return remaining;
	}
}
