/* {% from "system/loader.njk" import partial %} */

class App
{
	/**
	 * @param {Object} [options]
	 * @param {string} [options.flags]
	 * @param {Object} [options.grid]
	 */
	constructor({ flags="", grid } = {})
	{
		this.flags = {};

		flags.split( "," ).forEach( flag => {
			const [key, value] = flag.split("=");
			this.flags[key] = value;
		});

		this.grid = grid;
	}

	/**
	 *
	 */
	clearLocalData()
	{
		localStorage.removeItem( "spellcheck" );
	}

	/**
	 * @param {string} url
	 * @return {Object}
	 */
	static async fetchGrid( url )
	{
		let gridUrl = new URL( url );
		let today = gridUrl.pathname
			.split( "/" )
			.slice( 1, 4 )
			.join( "-" );

		let localData = App.getLocalData();

		// We already fetched today's grid
		if( localData.today === today )
		{
			return localData.grid;
		}

		try
		{
			let response = await fetch( url );
			let div = document.createElement( "html" );
			div.innerHTML = await response.text();

			let metadataElement = div.querySelector( ".StoryBodyCompanionColumn p:nth-child(4)" );
			if( metadataElement )
			{
				localData.metadata = App.parseMetadata( metadataElement.innerText );
			}

			let gridElement = div.querySelector( ".StoryBodyCompanionColumn p:nth-child(5)" );
			if( gridElement )
			{
				localData.grid = App.parseGrid( gridElement.innerText );
				localData.today = today;
			}
			else
			{
				throw new Error( "There was a problem fetching today’s grid" );
			}

			App.setLocalData( localData );
		}
		catch( error )
		{
			if( error.isSpellCheckError )
			{
				console.log( error.details );
			}

			throw new Error( "There was a problem parsing today’s grid" );
		}

		return localData.grid;
	}

	/**
	 * @returns {Object}
	 */
	static getLocalData()
	{
		let localData = localStorage.getItem( "spellcheck" );
		if( localData )
		{
			return JSON.parse( localData );
		}
		else
		{
			return {};
		}
	}

	/**
	 * @param {Array} [words=[]}
	 */
	gridRemaining( words=[] )
	{
		let gridRemaining = {
			distributions: {},
			wordLengths: this.grid.wordLengths,
		};

		Object.keys( this.grid.distributions ).forEach( letter =>
		{
			gridRemaining.distributions[letter] = Object.assign( {}, this.grid.distributions[letter] );
		});

		words.forEach( word =>
		{
			let letter = word[0].toUpperCase();
			let length = word.length;
			if( gridRemaining.distributions[letter] && gridRemaining.distributions[letter][length] )
			{
				gridRemaining.distributions[letter][length]--;
			}
		});

		return gridRemaining;
	}

	/**
	 * @param {string} gridString
	 * @returns {Object}
	 */
	static parseGrid( gridString )
	{
		let result = {
			distributions: {},
			wordLengths: 0,
		};

		// Clean up whitespace (fixes parsing issue encountered 2022-01-25)
		// ex., "2 Σ:" → "2Σ:"
		gridString = gridString.replace( /\s\n?([A-ZΣ]:)/g, "$1" );

		// Insert newlines if they're missing - ex., when fetched with `fetch()`
		if( !gridString.includes( "\n" ) )
		{
			gridString = gridString.replace( /(.:)/g, "\n$&" );
		}

		let gridRows = gridString
			.split( "\n" )
			.map( row => row.replace( /\s+/g, "\t" ).split( "\t" ) );

		if( gridRows.length < 3)
		{
			throw new Error( `Invalid grid string: Expecting 3 or more lines, found ${gridRows.length}` );
		}

		gridRows.forEach( (gridRow, index) =>
		{
			let expectedColummns = gridRows[0].length;
			if( gridRow.length !== expectedColummns )
			{
				throw new Error( `Invalid grid string: Expecting ${expectedColummns} columns on line ${index+1}, found ${gridRow.length}` );
			}
		});

		let letterCount = gridRows.length - 1;
		let wordLengths = gridRows[0].slice( 1, gridRows[0].length - 1 );
		result.wordLengths = wordLengths.map( wordLength => parseInt( wordLength ) );

		for( let l=1; l<letterCount; l++ )
		{
			let letter = gridRows[l][0].replace( ":", "" ).toUpperCase();
			let letterCounts = gridRows[l].slice( 1, gridRows[0].length - 1 );

			if( !result.distributions[letter] )
			{
				result.distributions[letter] = {};
			}

			letterCounts.forEach( (value, index) =>
			{
				let letterCount = value === "-" ? 0 : parseInt( value );
				result.distributions[letter][wordLengths[index]] = letterCount;
			});
		}

		return result;
	}

	/**
	 * @param {string} metadataString
	 * @returns {Object}
	 */
	static parseMetadata( metadataString )
	{
		const metadata = {
			pangrams: 0,
		};

		const normalizedString = metadataString.toLowerCase();
		const pattern = /pangrams:\s(\d+)/;

		const matches = normalizedString.match(pattern);
		if( matches ) {
			metadata.pangrams = parseInt(matches[1]);
		}

		return metadata;
	}

	/**
	 * @param {Object} data
	 */
	static setLocalData( data )
	{
		localStorage.setItem( "spellcheck", JSON.stringify( data ) );
	}

	/**
	 * @param {string} message
	 * @param {string} [details] - ex., .message from a thrown Error
	 */
	static showErrorModal( message, details )
	{
		/* eslint-disable no-unused-vars */
		const error = {
			details: details,
			message: message,
		}; /* eslint-enable no-unused-vars */

		/* eslint-disable quotes */
		const body = `{{- partial('modals/error.njk') -}}`; /* eslint-enable quotes */

		window.spellcheckUi.showModal({
			body: body,
			name: "error",
			subtitle: "An unexpected problem occurred.",
		});
	}

	/**
	 * Show the grid modal
	 */
	showGridModal()
	{
		return this.showMainModal();
	}

	/**
	 * Show the main Spell Check modal
	 */
	showMainModal()
	{
		const {words=[]} = JSON.parse( localStorage.getItem( "sb-today" ) || "{}" );

		/*
		 * Grid
		 */
		const gridRemaining = this.gridRemaining( words || [] );
		const distributions = Object.keys( gridRemaining.distributions )
			.map( (letter) =>
			{
				return {
					letter: letter,
					remaining: Object.keys( gridRemaining.distributions[letter] ).map( wordLength =>
					{
						let originalValue = this.grid.distributions[letter][wordLength];
						let currentValue = gridRemaining.distributions[letter][wordLength];

						if( currentValue === 0 )
						{
							if( originalValue === 0 )
							{
								currentValue = "-";
							}
							else
							{
								/* eslint-disable quotes */
								currentValue = `{{- partial('components/checked-item.njk') -}}`; /* eslint-enable quotes */
							}
						}

						return currentValue;
					}),
				};
			});

		/* eslint-disable no-unused-vars */
		const grid = {
			distributions: distributions,
			wordLengths: this.grid.wordLengths,
		}; /* eslint-enable no-unused-vars */

		/* eslint-disable quotes */
		const body = `{{- partial('modals/main.njk') -}}`; /* eslint-enable quotes */

		window.spellcheckUi.showModal({
			body: body,
			flags: this.flags || {},
			name: "main",
		});
	}
}

export default App;
