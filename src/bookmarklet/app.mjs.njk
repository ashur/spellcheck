/* {% from "system/loader.njk" import partial %} */
import Grid from "./grid.mjs";
import Storage from "./storage.mjs";
import TLL from "./tll.mjs";
import UI from "./ui.mjs";

export const APP_VERSION = "{{ pkg.version }}";
export const METADATA = JSON.parse(`{{ metadata | dump | safe }}`);

export default class App
{
	/**
	 * @param {Object} options
	 * @param {Grid} options.grid
	 * @param {Object} options.puzzleId
	 * @param {Object} options.storage
	 * @param {TLL} options.tll
	 */
	constructor({ date, grid, puzzleId, storage, tll } = {})
	{
		this.date = date;
		this.grid = grid;
		this.puzzleId = puzzleId;
		this.storage = storage;
		this.tll = tll;
	}

	/**
	 * @param {string} hintsUrl
	 * @param {string} date - ex., "2022-06-05"
	 * @return {Object}
	 * @throws Will throw an error if hints cannot be parsed from the given URL
	 */
	static async fetchHints( hintsUrl, date )
	{
		const hints = {};

		const response = await fetch( hintsUrl );
		const div = document.createElement( "html" );
		div.innerHTML = await response.text();

		let tllElement;
		const hintsElements = div.querySelectorAll( "[id*='sb-forum-'] p" );

		hintsElements.forEach( (hintsElement, index) =>
		{
			const nextHintsElement = hintsElements[index + 1];

			if( hintsElement.innerText.toLowerCase().startsWith( "two letter list:" ) )
			{
				 tllElement = nextHintsElement;
			}
		});

		/*
		 * Grid
		 */
		let gridElement = div.querySelector( "[id*='sb-forum-'] table" );
		if( gridElement )
		{
			hints.grid = Grid.getInstance({
				date,
				gridElement: gridElement,
			});
		}
		else
		{
			throw new Error( "Could not locate grid element on hints page" );
		}

		/*
		 * Two-Letter List
		 */
		if( tllElement )
		{
			hints.tll = TLL.getInstance({
				date,
				tllText: tllElement.innerText,
			});
		}
		else
		{
			throw new Error( "Could not locate two-letter list element on hints page" );
		}

		return hints;
	}

	/**
	 * Return a new instance of App populated with today's grid. Called the
	 * first time the bookmarklet is invoked after page load.
	 *
	 * @param {string} hintsUrl
	 * @param {Number} puzzleId
	 * @param {Storage} [storageSource]
	 * @return {App}
	 */
	static async getInstance( hintsUrl, puzzleId, storageSource )
	{
		const {pathname: urlPathname} = new URL( hintsUrl );
		const date = urlPathname
			.split( "/" )
			.slice( 1, 4 )
			.join( "-" );

		/*
		 * Storage
		 *
		 * If the version in storage doesn't match the current version let's
		 * go ahead and refetch hints, in case the data structure has changed.
		 */
		const storage = new Storage(
			storageSource || window.localStorage,
			APP_VERSION,
		);

		let shouldFetchHints = APP_VERSION !== storage.getItem( "version" );

		let grid, tll;
		if( !shouldFetchHints )
		{
			/*
			 * Grid
			 *
			 * Use grid from localStorage if today's grid has already been parsed
			 * and stored.
			 */
			const gridData = storage.getItem( "grid" );
			try
			{
				grid = Grid.getInstance( gridData );

				shouldFetchHints = shouldFetchHints
					|| grid.date !== date;
			}
			catch( error )
			{
				// If instantiation fails for any reason — ex., missing required
				// properties — fetch today's data and start over.
				shouldFetchHints = true;
			}
		}

		if( !shouldFetchHints )
		{
			/*
			 * Two-Letter List
			 *
			 * Use TLL from localStorage if today's TLL has already been parsed
			 * and stored.
			 */
			const tllData = storage.getItem( "tll" );
			try
			{
				tll = TLL.getInstance( tllData );

				shouldFetchHints = shouldFetchHints
					|| tll.date !== date;
			}
			catch( error )
			{
				// If instantiation fails for any reason — ex., missing required
				// properties — fetch today's data and start over.
				shouldFetchHints = true;
			}
		}

		/*
		 * Fetch remote hints
		 *
		 * If app data isn't defined locally or is out of date, fetch and parse
		 * today's hints, and then store them.
		 */
		if( shouldFetchHints )
		{
			// console.log( `Fetching remote hints for '${date}'...` );

			const {grid: latestGrid, tll: latestTLL} = await App.fetchHints( hintsUrl, date );

			grid = latestGrid;
			tll = latestTLL;

			storage.setItem( "grid", grid );
			storage.setItem( "tll", tll );
		}
		else
		{
			// console.log( `Using hints from storage for '${date}'` );
		}

		return new App({
			date,
			grid: grid,
			puzzleId,
			storage,
			tll: tll,
		});
	}

	/**
	 * @param {string} message
	 * @param {string} [details] - ex., .message from a thrown Error
	 */
	static showErrorModal( message, details )
	{
		UI.showModal({
			context: {
				error: {
					details: details,
					message: message,
				},
			},
			name: "error",
			subtitle: "An unexpected problem occurred.",
			template: "error",
		});
	}

	/**
	 * Shim for bookmarklet
	 */
	showGridModal()
	{
		return this.showMainModal();
	}

	/**
	 * Show the main Spell Check modal
	 */
	showMainModal()
	{
		let anonStorageItem, userStorageItem;
		Object.entries( localStorage ).forEach( ([key, value]) =>
		{
			if( key.indexOf(`games-state-spelling_bee`) === 0 )
			{
				// Answers can be stored using one of two keys:
				//   - games-state-spelling_bee/<userId>
				//   - games-state-spelling_bee/ANON
				// so we need to check both of them.
				try
				{
					if( key.indexOf(`games-state-spelling_bee/ANON`) === 0 )
					{
						anonStorageItem = JSON.parse( value );
					}
					else
					{
						userStorageItem = JSON.parse( value );
					}
				}
				catch( error )
				{
					throw new Error( "Could not parse answers from storage" );
				}
			}
		} );

		/**
		 * NYTSB currently stores the player's answers in:
		 *
		 * 	 [storageItem].states[].data.answers
		 *
		 * The state object must be located using today’s puzzleId, which comes
		 * from window.gameData.today.id
		 */
		const storageItem = userStorageItem || anonStorageItem || {};
		const state = storageItem?.states?.find((state) => state.puzzleId === this.puzzleId);
		const words = state?.data.answers || [];

		UI.showModal({
			context: {
				grid: this.grid,
				metadata: METADATA,
				notification: {
					icon: "⚠️",
					text: "Spell Check is unavailable while the NYT Tech Guild is on strike. Please consider not using NYT Games or the Cooking app in support. <a href='https://www.theverge.com/2024/11/4/24287600/new-york-times-tech-guild-strike-before-presidential-election'>Learn more</a>",
				},
				tll: this.tll,
				words,
			},
			name: "main",
			template: "main",
		});

		/*
		 * Carousel
		 */
		const carouselCards = document.querySelector( ".spellcheck-carousel__cards" );
		if( carouselCards && carouselCards.childElementCount > 1 )
		{
			const carouselState = {
				currentCard: 0,
			};

			const prevArrow = document.querySelector( '.spellcheck-carousel__nav .sb-bob-prev' );
			const nextArrow = document.querySelector( '.spellcheck-carousel__nav .sb-bob-next' );

			const handleKeydown = (event) =>
			{
				if( event.key === 'ArrowLeft' )
				{
					showPrevCard();
				}
				if( event.key === 'ArrowRight' )
				{
					showNextCard();
				}
			};

			const scrollBehavior = () =>
			{
				const motionMediaQuery = window.matchMedia("(prefers-reduced-motion: reduce)");
				return (!motionMediaQuery || motionMediaQuery.matches) ? "auto" : "smooth";
			}

			const showPrevCard = () =>
			{
				if( carouselState.currentCard > 0 )
				{
					const prevCard = carouselCards.childNodes[carouselState.currentCard - 1];
					prevCard.scrollIntoView( {
						behavior: scrollBehavior(),
						block: "nearest",
						inline: "nearest",
					} );
				}
			}

			const showNextCard = () =>
			{
				if( carouselState.currentCard < carouselCards.childElementCount - 1 )
				{
					const nextCard = carouselCards.childNodes[carouselState.currentCard + 1];
					nextCard.scrollIntoView( {
						behavior: scrollBehavior(),
						block: "nearest",
						inline: "nearest",
					} );
				}
			}

			prevArrow.addEventListener( "click", showPrevCard );
			nextArrow.addEventListener( "click", showNextCard );
			document.addEventListener( "keydown", handleKeydown );

			UI.addEventListener( "modalhide", () =>
			{
				document.removeEventListener( "keydown", handleKeydown );
			});

			carouselCards.addEventListener( "scroll", (event) =>
			{
				const cardIndex = Math.round(
					event.target.scrollLeft /
					event.target.scrollWidth *
					carouselCards.childElementCount
				);

				carouselState.currentCard = cardIndex;

				document.querySelectorAll( ".spellcheck-carousel__dot" ).forEach( (dotElement, dotIndex) =>
				{
					if( dotIndex === cardIndex )
					{
						dotElement.dataset.active = "true";
					}
					else
					{
						dotElement.dataset.active = "false";
					}
				});

				/*
				 * Arrows
				 */
				const showPrev = cardIndex > 0;
				const showNext = cardIndex < carouselCards.childElementCount - 1;

				if( showPrev )
				{
					prevArrow.classList.add( 'active' );
				}
				else
				{
					prevArrow.classList.remove( 'active' );
				}

				if( showNext )
				{
					nextArrow.classList.add( 'active' );
				}
				else
				{
					nextArrow.classList.remove( 'active' );
				}
			});
			carouselCards.style.setProperty( "--carousel-columns", carouselCards.childElementCount );

			const carouselDots = document.querySelector( ".spellcheck-carousel__dots" );
			document.querySelectorAll( ".spellcheck-carousel__cards > *" ).forEach( (carouselCard, index) =>
			{
				const carouselDot = document.createElement( "div" );
				carouselDot.classList.add( "spellcheck-carousel__dot" );
				if( carouselCard.dataset.dotStyle )
				{
					carouselDot.classList.add( `spellcheck-carousel__dot--${carouselCard.dataset.dotStyle}` );
				}

				if( index === 0 )
				{
					carouselDot.dataset.active = "true";
				}
				carouselDots.appendChild( carouselDot );
			});
		}
	}
}
