/* {% from "system/loader.njk" import partial %} */
import Grid from "./grid.mjs";
import Storage from "./storage.mjs";

export const APP_VERSION = "{{ pkg.version }}";

export default class App
{
	/**
	 * @param {Object} [options]
	 * @param {Object} [options.grid]
	 * @param {Object} [options.storage]
	 */
	constructor({ grid, storage } = {})
	{
		this.grid = grid;
		this.storage = storage;
	}

	/**
	 * @param {string} hintsUrl
	 * @param {string} date - ex., "2022-06-05"
	 * @return {Object}
	 * @throws Will throw an error if hints cannot be parsed from the given URL
	 */
	static async fetchHints( hintsUrl, date )
	{
		const hints = {};

		const response = await fetch( hintsUrl );
		const div = document.createElement( "html" );
		div.innerHTML = await response.text();

		const gridElement = div.querySelector( ".StoryBodyCompanionColumn p:nth-child(5)" );
		if( gridElement )
		{
			hints.grid = new Grid({
				gridText: gridElement.innerText,
				date,
			});
		}
		else
		{
			throw new Error( "Could not locate grid element on hints page" );
		}

		return hints;
	}

	/**
	 * Return a new instance of App populated with today's grid. Called the
	 * first time the bookmarklet is invoked after page load.
	 *
	 * @param {string} hintsUrl
	 * @param {Storage} [storageSource]
	 * @return {App}
	 */
	static async getInstance( hintsUrl, storageSource )
	{
		const {pathname: urlPathname} = new URL( hintsUrl );
		const date = urlPathname
			.split( "/" )
			.slice( 1, 4 )
			.join( "-" );

		/*
		 * Storage
		 *
		 * If the version in storage doesn't match the current version let's
		 * go ahead and refetch hints, in case the data structure has changed.
		 */
		const storage = new Storage(
			storageSource || window.localStorage,
			APP_VERSION,
		);

		let shouldFetchHints = APP_VERSION !== storage.getItem( "version" );

		/*
		 * Grid
		 *
		 * Use grid from localStorage if today's grid has already been parsed
		 * and stored.
		 */
		let grid = storage.getItem( "grid" );
		shouldFetchHints = shouldFetchHints
			|| grid === undefined
			|| grid.date !== date;

		/*
		 * Fetch remote hints
		 *
		 * If app data isn't defined locally or is out of date, fetch and parse
		 * today's hints, and then store them.
		 */
		if( shouldFetchHints )
		{
			// console.log( `Fetching remote hints for '${date}'...` );

			const {grid: latestGrid} = await App.fetchHints( hintsUrl, date );
			storage.setItem( "grid", latestGrid );

			grid = latestGrid;
		}
		else
		{
			// console.log( `Using hints from storage for '${date}'` );
		}

		return new App({
			grid: new Grid({
				distributions: grid.distributions,
				wordLengths: grid.wordLengths,
			}),
			storage,
		});
	}

	/**
	 * @param {string} message
	 * @param {string} [details] - ex., .message from a thrown Error
	 */
	static showErrorModal( message, details )
	{
		/* eslint-disable no-unused-vars */
		const error = {
			details: details,
			message: message,
		}; /* eslint-enable no-unused-vars */

		/* eslint-disable quotes */
		const body = `{{- partial('modals/error.njk') -}}`; /* eslint-enable quotes */

		window.spellcheckUi.showModal({
			body: body,
			name: "error",
			subtitle: "An unexpected problem occurred.",
		});
	}

	/**
	 * Shim for bookmarklet
	 */
	showGridModal()
	{
		return this.showMainModal();
	}

	/**
	 * Show the main Spell Check modal
	 */
	showMainModal()
	{
		const flags = this.flags || {};
		const {words=[]} = JSON.parse( localStorage.getItem( "sb-today" ) || "{}" );

		/*
		 * Grid
		 */
		const gridRemaining = this.gridRemaining( words || [] );
		const distributions = Object.keys( gridRemaining.distributions )
			.map( (letter) =>
			{
				return {
					letter: letter,
					remaining: Object.keys( gridRemaining.distributions[letter] ).map( wordLength =>
					{
						let originalValue = this.grid.distributions[letter][wordLength];
						let currentValue = gridRemaining.distributions[letter][wordLength];

						if( currentValue === 0 )
						{
							if( originalValue === 0 )
							{
								currentValue = "-";
							}
							else
							{
								/* eslint-disable quotes */
								currentValue = `{{- partial('components/checked-item.njk') -}}`; /* eslint-enable quotes */
							}
						}

						return currentValue;
					}),
				};
			});

		/* eslint-disable no-unused-vars */
		const grid = {
			distributions: distributions,
			wordLengths: this.grid.wordLengths,
		}; /* eslint-enable no-unused-vars */

		/* eslint-disable quotes */
		const body = `{{- partial('modals/main.njk') -}}`; /* eslint-enable quotes */

		window.spellcheckUi.showModal({
			body: body,
			flags: flags,
			name: "main",
		});
	}
}
