/* {% from "system/loader.njk" import partial %} */

class App
{
	/**
	 * @param {Object} [options]
	 * @param {Object} [options.grid]
	 */
	constructor({ grid } = {})
	{
		this.grid = grid;
	}

	/**
	 *
	 */
	clearLocalData()
	{
		localStorage.removeItem( "spellcheck" );
	}

	/**
	 * @returns {Object}
	 */
	static getLocalData()
	{
		let localData = localStorage.getItem( "spellcheck" );
		if( localData )
		{
			return JSON.parse( localData );
		}
		else
		{
			return {};
		}
	}

	/**
	 * @param {Object} data
	 */
	static setLocalData( data )
	{
		localStorage.setItem( "spellcheck", JSON.stringify( data ) );
	}

	/**
	 * @param {string} message
	 * @param {string} [details] - ex., .message from a thrown Error
	 */
	static showErrorModal( message, details )
	{
		/* eslint-disable no-unused-vars */
		const error = {
			details: details,
			message: message,
		}; /* eslint-enable no-unused-vars */

		/* eslint-disable quotes */
		const body = `{{- partial('modals/error.njk') -}}`; /* eslint-enable quotes */

		window.spellcheckUi.showModal({
			body: body,
			name: "error",
			subtitle: "An unexpected problem occurred.",
		});
	}

	/**
	 * Show the grid modal
	 */
	showGridModal()
	{
		return this.showMainModal();
	}

	/**
	 * Show the main Spell Check modal
	 */
	showMainModal()
	{
		const flags = this.flags || {};
		const {words=[]} = JSON.parse( localStorage.getItem( "sb-today" ) || "{}" );

		/*
		 * Grid
		 */
		const gridRemaining = this.gridRemaining( words || [] );
		const distributions = Object.keys( gridRemaining.distributions )
			.map( (letter) =>
			{
				return {
					letter: letter,
					remaining: Object.keys( gridRemaining.distributions[letter] ).map( wordLength =>
					{
						let originalValue = this.grid.distributions[letter][wordLength];
						let currentValue = gridRemaining.distributions[letter][wordLength];

						if( currentValue === 0 )
						{
							if( originalValue === 0 )
							{
								currentValue = "-";
							}
							else
							{
								/* eslint-disable quotes */
								currentValue = `{{- partial('components/checked-item.njk') -}}`; /* eslint-enable quotes */
							}
						}

						return currentValue;
					}),
				};
			});

		/* eslint-disable no-unused-vars */
		const grid = {
			distributions: distributions,
			wordLengths: this.grid.wordLengths,
		}; /* eslint-enable no-unused-vars */

		/* eslint-disable quotes */
		const body = `{{- partial('modals/main.njk') -}}`; /* eslint-enable quotes */

		window.spellcheckUi.showModal({
			body: body,
			flags: flags,
			name: "main",
		});
	}
}

export default App;
